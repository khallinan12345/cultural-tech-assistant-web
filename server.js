import express from 'express';import cors from 'cors';import fetch from 'node-fetch';import path from 'path';import { fileURLToPath } from 'url';// ES module compatibilityconst __filename = fileURLToPath(import.meta.url);const __dirname = path.dirname(__filename);const app = express();const PORT = 3001;// Set your Hugging Face API token hereconst HF_API_TOKEN = process.env.HF_API_TOKEN || "";// You can choose different models - this is a Llama 2 model hosted on Hugging Faceconst MODEL_URL = "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2";// Enable CORS and JSON parsingapp.use(cors({  origin: ['http://localhost:5173', 'https://khallinan12345.github.io'],  methods: ['GET', 'POST'],  credentials: true}));app.use(express.json());// API endpoint for text generationapp.post('/api/generate', async (req, res) => {  try {    console.log('Received request:', JSON.stringify(req.body, null, 2));    const { prompt } = req.body;        if (!HF_API_TOKEN) {      return res.status(500).json({         error: "Hugging Face API token not configured. Please set HF_API_TOKEN in server.js."      });    }        // Prepare the request for Hugging Face API    const payload = {      inputs: prompt,      parameters: {        max_new_tokens: 1000,        temperature: 0.7,        return_full_text: false      }    };        console.log(`Sending request to Hugging Face API`);        const response = await fetch(MODEL_URL, {      method: 'POST',      headers: {        'Authorization': `Bearer ${HF_API_TOKEN}`,        'Content-Type': 'application/json'      },      body: JSON.stringify(payload)    });        if (!response.ok) {      const errorText = await response.text();      console.error(`Hugging Face API error (${response.status}):`, errorText);      return res.status(response.status).json({         error: `Error from Hugging Face API: ${errorText}`       });    }        const data = await response.json();    console.log('Received response from Hugging Face API:', data);        // Extract the generated text - Hugging Face API returns different format    let generatedText = '';    if (Array.isArray(data)) {      generatedText = data[0].generated_text || '';    } else if (data.generated_text) {      generatedText = data.generated_text;    } else {      // Fallback in case the response format is different      generatedText = JSON.stringify(data);    }        res.json({ response: generatedText });      } catch (error) {    console.error('Error in API handler:', error);    res.status(500).json({ error: error.message });  }});// Serve static files from the build directoryapp.use(express.static(path.join(__dirname, 'dist')));// All other GET requests not handled will return the React appapp.get('*', (req, res) => {  res.sendFile(path.join(__dirname, 'dist', 'index.html'));});app.listen(PORT, () => {  console.log(`Server running on http://localhost:${PORT}`);  console.log(`Using Hugging Face API for model inference`);});